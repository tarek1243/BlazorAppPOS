@page "/products"
@using BlazorAppSales.Data;

<h1>Products</h1>
<datalist id="texts">

    @foreach (var item in productTags)
    {
        <option value="@item" />
    }
</datalist>
@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Tags</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>
                        <input class="form-control" @bind-value="@product.Id" size="5" disabled />
                        <input class="form-control" @bind-value="@product.Name" />
                    </td>
                    <td>
                        <input class="form-control" type="number" @bind-value="@product.Price" />
                    </td>
                    <td>
                        @*<input class="form-control" value="@product.Tags" @onchange="() => UpdateProductTags(product)" />*@
                        @if (product.ProductTags == null) { product.ProductTags = new List<ProductTag>(); }
                        <input class="form-control" list="texts" multiple type="email" value="@string.Join(", ", product.ProductTags)" @onchange="@(e => UpdateProductTags(product, e.Value.ToString()))" />
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProduct(product)">Save</button>
                        <button class="btn btn-primary" @onclick="() => AddSupplementary(product)">Add Supplementary</button>
                    </td>
                </tr>
                <tr>
                    <td colspan="5">
                        <div class="fancy-div">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>related #</th>
                                        <th>qty</th>
                                        <th>price</th>
                                        <th>total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (product.RelatedProducts != null)
                                        @foreach (var related_prod in product.RelatedProducts)
                                        {
                                            <BlazorAppSales.Pages.Components.RelatedProductEntryComponent current_related_product=related_prod
                                                                                          products=products_noTracking>

                                            </BlazorAppSales.Pages.Components.RelatedProductEntryComponent>

                                      
                                            @*K@if (prod.ShowLines)
                            {
                            <tr>
                            @if (latestShift != @order.shift_Id)
                            {
                            <td class="centered" style=" padding: 0; margin: 0; height:100%;    background-color: #4CAF50;" rowspan='@Orders.Where(o => o.shift_Id==@order.shift_Id).Count()'>
                            <div style="width: 100%; height: 100%;">
                            @order.shift_Id
                            </div>
                            </td>
                            }
                            </tr>
                            }*@
                                        }
                                </tbody>
                            </table>
                        </div>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}



@code {

    Product selected_product = new  Product();
   // List<Product> transactionLine_ReturnReasons = new DbContext1().transactionLine_ReturnReasons.AsNoTracking().ToList();// new List<TransactionLine_ReturnReason>();


    private List<Product> products;
    private List<Product> products_noTracking;
    private ProductService productService;
    List<string> productTags = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        productService = new ProductService();
        products = await productService.GetProductsAsync();
        products_noTracking = await productService.GetProductsAsNoTrackingAsync();
        productTags = await productService.GetProductsTagsAsync();
    }

    private async void UpdateProductTags(Product product, string newTags)
    {
        var tags = newTags.Split(",").Select(x => x.Trim()).ToList();
        List<ProductTag> tags_objects = tags.Select(tag => new ProductTag { Name = tag }).ToList();
        product.ProductTags = tags_objects;
        await productService.UpdateProduct(product);
    }
    private async void DeleteProduct(int productId)
    {
        await productService.DeleteProductAsync(productId);
        products = await productService.GetProductsAsync();
    }
    private async void CreateProduct()
    {
        var newProduct = new Product() { Name = "New Product", Price = 0 };
        await productService.CreateProductAsync(newProduct);
        products = await productService.GetProductsAsync();
    }


    private void UpdateProductName(Product product)
    {
        // product.Name = eventArgs.Value.ToString();
    }

    private void UpdateProductPrice(Product product)
    {
        //  product.Price = Convert.ToDecimal(eventArgs.Value);
    }

    private void UpdateProductTags(Product product)
    {
        // product.Tags = eventArgs.Value.ToString();
    }

    private async Task EditProduct(Product product)
    {
        await productService.UpdateProduct(product);
    }

    private async Task AddSupplementary(Product product)
    {
        if (product.RelatedProducts == null) product.RelatedProducts = new List<RelatedProduct>();
        RelatedProduct rel_product = new RelatedProduct();
        rel_product.Parent_ProductId = product.Id ;
        rel_product.Related_ProductId =  3 ;//product.ProductId;//must be changed
        rel_product.Qty = 1;
        product.RelatedProducts.Add(rel_product);
       // await productService.UpdateProduct(product);


    }



}
