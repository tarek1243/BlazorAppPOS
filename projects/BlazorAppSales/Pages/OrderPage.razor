@page "/order-receipt/{orderId}"
@page "/order/{orderId}"


@*/order-receipt/1058
https://localhost:7092/order-receipt/1058
*@


@using BlazorAppSales.Data;
@using ClassLibraryModels;
@using Microsoft.JSInterop;
@using QRCoder;
@using System.Drawing;


@inject AuthenticationStateProvider authenticationStateProvider
@inject OrderService orderService
@inject IJSRuntime Js

@if (order != null)
    @if (order.Total != 0)
    {

        @*id = "div-to-print"*@
        <div id="printDiv" class="div-to-print-a4">

            <div id="printDiv">
                <div class="receipt">
                    <div class="imageContainer">
                        <img class="img_hoverxxxx" src="@imgSrc_ImageData1" width="285px" />
                    </div>
                    @*<h3>Order Receipt</h3>*@
                    <h3>@order.company_name</h3>
                    <div class="order-details">
                        @*   <div><strong>Order Number:</strong> @order.Id</div>*@
                        <div><strong></strong> @currentUser.branch</div>
                        <div><strong></strong> @currentUser.Name</div>


                        <div><strong>Invoice:</strong> @order.InvoiceNumber</div>
                        <div><strong></strong> @order.OrderDate</div>
                        @*<div><strong>Cashier:</strong> @order.Cashier</div>
                <div><strong>Customer:</strong> @order.CustomerName</div>*@
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Qty</th>
                                <th>Price</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (order != null)
                                @if (order.OrderLines != null)
                                    @foreach (var item in order.OrderLines)
                                    {
                                        <tr>
                                            <td>@item.Product.Name</td>
                                            <td>@item.Quantity.ToString("0")</td>
                                            <td>@item.Price</td>
                                            <td>@item.Total</td>
                                        </tr>
                                    }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3" style="text-align: right;"><strong>Total:</strong></td>
                                <td>@order.Total</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                @TableHeader
            </div>


        </div>

<button class="print-button" @onclick="PrintDiv">Print</button>
@*<button class="print-button" @onclick="PrintOrderSummary">Print</button>*@
    }


 
@code {
    private async Task PrintDiv()
    {
        await Js.InvokeVoidAsync("printDiv", "printDiv");
    }
    string imgSrc_ImageData1 = "";

    [Parameter]
    public Order order { get; set; } //= new Order();
    [Parameter]
    public string orderId { get; set; }

    [Parameter] public EventCallback<Order> onClose { get; set; }

    public RenderFragment? TableHeader { get; set; }


    WebApp1User currentUser;
    ApplicationDbContext applicationDbContext = new ApplicationDbContext();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await Util.ClassCurrentSessionUtil.GetUser(authenticationStateProvider, applicationDbContext);
        if (currentUser != null)
            imgSrc_ImageData1 = ClassLibraryUtil.ClassImageUtil.get_image_base64(currentUser.logo);

        if (order == null)
        {
            order = await orderService.GetOrderById(int.Parse(orderId));
            TableHeader = GenerateReceipt(order);
        }
    }


    private string GenerateQrCode(string data)
    {
        QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(data, QRCodeGenerator.ECCLevel.Q);
        QRCode qrCode = new QRCode(qrCodeData);
        Bitmap qrCodeImage = qrCode.GetGraphic(5);

        using MemoryStream ms = new MemoryStream();
        //qrCodeImage.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
        qrCodeImage.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
        byte[] qrCodeBytes = ms.ToArray();
        string qrCodeBase64 = Convert.ToBase64String(qrCodeBytes);
        return $"data:image/png;base64,{qrCodeBase64}";
    }

    public RenderFragment GenerateReceipt(Order order_parameter)
    {
        order = order_parameter;
        return builder =>
        {

            //builder.AddContent(4, "item.Product.Name");

            if (order == null || order.OrderLines == null)
                return;
            builder.OpenElement(0, "div");
            //builder.AddContent(1, "Order Details:");
            //builder.OpenElement(2, "ul");
            //if (order != null)
            //    if (order.Items != null)
            //        foreach (var item in order.Items)
            //        {
            //            builder.OpenElement(3, "li");
            //            builder.AddContent(4, item.Product.Name);
            //            builder.CloseElement();
            //        }
            //builder.CloseElement();
            builder.OpenElement(5, "img");

            var saudiConvertion = new SaudiConvertion();
            // string encrypted_str = saudiConvertion.getBase64("sellerName",  "310122393500003", order.OrderDate.ToString(), order.Total.ToString(), order.VAT_Amount.ToString());
            string encrypted_str = saudiConvertion.getBase64(currentUser.CompanyName, currentUser.VAT_number, order.OrderDate.ToString(), order.Total.ToString(), order.VAT_Amount.ToString());

            builder.AddAttribute(6, "src", GenerateQrCode(encrypted_str));
            builder.CloseElement();
            builder.CloseElement();
        };

    }

    public void doRerender(Order order)
    {
        TableHeader = GenerateReceipt(order);
    }

    private async Task PrintOrderSummary()
    {
        // Select the printable div
        // var printableDiv = await JSRuntime.InvokeAsync<ElementReference>("document.querySelector", "#printableDiv");
        // Open the print dialog and print the contents of the printable div
        // await JSRuntime.InvokeVoidAsync("printJS", printableDiv.Id);
        await Js.InvokeVoidAsync("printInvoke");
    }


}
