@page "/products"
@using BlazorAppSales.Data;
@using ClassLibraryModels;
@inject AuthenticationStateProvider authenticationStateProvider

<h1>Products</h1>
<datalist id="texts">

    @foreach (var item in productTags)
    {
        <option value="@item" />
    }
</datalist>
@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary" @onclick="() => CreateProduct()">Add</button>

    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Tags</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {


                <BlazorAppSales.Pages.Components.ProductListLineComponent product="product"
                                                                  products_noTracking=products_noTracking
                                                                  productService=productService
                
                OnNeedCollapseAllProducts="(()=>collapsAll())"
                >
                </BlazorAppSales.Pages.Components.ProductListLineComponent>

            }
        </tbody>
    </table>
}



@code {
    void collapsAll()
    {
        products.ForEach(p => p.ShowLines = false);


    }

    Product selected_product = new Product();

    private List<Product> products;
    private List<Product> products_noTracking;
    private ProductService productService;
    List<string> productTags = new List<string>();

    protected override async Task OnInitializedAsync()
    {ReadCurrent();
        productService = new ProductService();
        products = await productService.GetProductsAsync(currentUser.CompanyName);
        products_noTracking = await productService.GetProductsAsNoTrackingAsync();
        productTags = await productService.GetProductsTagsAsync();

        
    }

    //private async void UpdateProductTags(Product product, string newTags)
    //{
    //    var tags = newTags.Split(",").Select(x => x.Trim()).ToList();
    //    List<ProductTag> tags_objects = tags.Select(tag => new ProductTag { Name = tag }).ToList();
    //    product.ProductTags = tags_objects;
    //    await productService.UpdateProduct(product);
    //}



    private async void DeleteProduct(int productId)
    {
        await productService.DeleteProductAsync(productId);
        products = products.Where(p => p.Id != productId).ToList();// await productService.GetProductsAsync(currentUser.CompanyName);
    }
    WebApp1User currentUser;
    ApplicationDbContext applicationDbContext = new ApplicationDbContext();

    // bool isAdmin = false;
    private async Task ReadCurrent()
    {
        currentUser = await Util.ClassCurrentSessionUtil.GetUser(authenticationStateProvider, applicationDbContext);
        //isAdmin = await Util.ClassCurrentSessionUtil.CheckIfUserHasRole(authenticationStateProvider, applicationDbContext, "Admin");
    }

    private async void CreateProduct()
    {
        var newProduct = new Product()
            {
                Name = "",
                Price = 0,
                Description = "",
                ImageUrl = ""            ,
                CompanyName = currentUser.CompanyName            ,
                Number = ""
            };
        await productService.CreateProductAsync(newProduct);
        products = await productService.GetProductsAsync(currentUser.CompanyName);
    }


    private void UpdateProductName(Product product)
    {
        // product.Name = eventArgs.Value.ToString();
    }

    private void UpdateProductPrice(Product product)
    {
        //  product.Price = Convert.ToDecimal(eventArgs.Value);
    }

    private void UpdateProductTags(Product product)
    {
        // product.Tags = eventArgs.Value.ToString();
    }







}
